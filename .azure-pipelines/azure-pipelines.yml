variables:
  CONFIGURATION: 'Debug'
  NRF_BLE_DRIVER_VERSION: 4.1.0-alpha
  NRF_BLE_CONNECTIVITY_VERSION: $(NRF_BLE_DRIVER_VERSION)
  NRF_BLE_DRIVER_ARTIFACT_PREFIX: nrf-ble-driver-$(NRF_BLE_DRIVER_VERSION)
  NRF_BLE_DRIVER_INSTALL_PREFIX: artifacts/$(NRF_BLE_DRIVER_ARTIFACT_PREFIX)
  GITHUB_CONNECTION: 'waylandCI'
  GITHUB_REPO: 'NordicSemiconductor/pc-ble-driver'
  GITHUB_TAG: v$(NRF_BLE_DRIVER_VERSION)
  VCPKG_REPOSITORY: 'https://github.com/Microsoft/vcpkg.git'
  VCPKG_ROOT: '$(Agent.HomeDirectory)/vcpkg'

jobs:
- job: Build
  strategy:
    matrix:
      win32:
        imageName: 'vs2017-win2016'
        architecture: 'x86'
        generator_platform: 'Win32'
        vcpkg_triplet: 'x86-windows'
        vcvars_path: "C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/vc/Auxiliary/build/vcvarsall.bat"
  pool:
    vmImage: $(imageName)
  steps:
  - script: |
      choco install ninja make
      pip3 install -r $(Build.SourcesDirectory)\\requirements.txt
      python .azure_pipelines/nordic_setup.py --prefix=$(Agent.BuildDirectory)/toolchain --tcversion nRF5_SDKv16 --env > $(Agent.BuildDirectory)/tcenv.bat
    condition: contains(variables['imageName'], 'win')
    displayName: '[Windows] Install build dependencies'
  - script: |
      @echo off
      echo "VCPKG_ROOT is %VCPKG_ROOT%"
      git clone $(VCPKG_REPOSITORY) %VCPKG_ROOT%
      cd /d %VCPKG_ROOT%
      bootstrap-vcpkg.bat
      cd /d $(Build.SourcesDirectory)
    condition: contains(variables['imageName'], 'win')
    displayName: '[Windows] Install vcpkg'
  - script: |
      %VCPKG_ROOT%\vcpkg install asio:$(vcpkg_triplet) catch2:$(vcpkg_triplet)
    condition: contains(variables['imageName'], 'win')
    displayName: '[Windows] Install pc-ble-driver dependencies'
  - script: |
      @echo off
      call "$(vcvars_path)" $(architecture)
      del "C:\ProgramData\chocolatey\bin\c++.exe"
      del "C:\ProgramData\chocolatey\bin\g++.exe"
      del "C:\ProgramData\chocolatey\bin\gcc.exe"
      del "C:\Strawberry\c\bin\c++.exe"
      del "C:\Strawberry\c\bin\g++.exe"
      del "C:\Strawberry\c\bin\gcc.exe"
      call $(Agent.BuildDirectory)/tcenv.bat
      cmake -H. -B_build -GNinja -DCMAKE_INSTALL_PREFIX=$(Build.ArtifactStagingDirectory) -DBUILD_SHARED_LIBS=ON -DBUILD_CONNECTIVITY=1 -DCONNECTIVITY_VERSION=$(NRF_BLE_CONNECTIVITY_VERSION) -DNRF_BLE_DRIVER_VERSION=$(NRF_BLE_DRIVER_VERSION)
      cmake --build _build --config $(CONFIGURATION) --target install
    condition: contains(variables['imageName'], 'win')
    displayName: '[Windows] Run cmake and build project'
  - task: PublishPipelineArtifact@1
    inputs:
      path: $(Build.ArtifactStagingDirectory)
      artifact: pc-ble-driver-$(Agent.OS)-$(architecture)
